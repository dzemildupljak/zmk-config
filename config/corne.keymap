/*
 * Copyright (c) 2022 Aleksandar Diklic
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define TAPPING_TERM 400
#define COMBO_TIMEOUT 40

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

// Friendlier volume definitions, tap volume down, hold mute
#define VOLUME_DOWN &mt K_MUTE C_VOLUME_DOWN
#define VOLUME_UP &kp C_VOLUME_UP

&kscan0 {
    debounce-press-ms = <10>;
    debounce-release-ms = <10>;
};

/ {
  behaviors {
    /*
    * td_media mimics the behavior of AirPods controls:
    *  - tap once for play / pause
    *  - tap twice for next track
    *  - tap three times for previous track
    */
    td_media: tap_dance_media {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_MEDIA";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TERM>;
      bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
    };

    /*
    * td_grave groups grave / locking functions into one key:
    *  - tap once for grave
    *  - tap twice to lock the host
    *  - tap three times to put the host to sleep
    */
    td_grave: tap_dance_grave {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_GRAVE";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TERM>;
      bindings = <&kp GRAVE>, <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
      bindings = <
        &kp TAB   &kp Q &kp W &kp E    &kp R     &kp T      &kp Y   &kp U     &kp I     &kp O   &kp P    &kp BSPC
        &kp LCTRL &kp A &kp S &kp D    &kp F     &kp G      &kp H   &kp J     &kp K     &kp L   &kp SEMI &kp SQT
        &kp LSHFT &kp Z &kp X &kp C    &kp V     &kp B      &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp ESC
                              &kp LGUI &mo LOWER &kp SPACE  &kp RET &mo RAISE &kp RALT
      >;
    };

    lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
      bindings = <
        &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5        &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
        &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
        &kp LSHFT  &trans       &trans       &trans       &trans       &trans        &trans   &trans   &trans &trans    &trans &trans
                                             &kp LGUI     &trans       &kp SPACE     &kp RET  &trans   &kp RALT
      >;
    };

    raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
      bindings = <
        &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT  &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
        &kp LCTRL &trans   &trans &trans   &trans   &trans     &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
        &kp LSHFT &trans   &trans &trans   &trans   &trans     &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                                  &kp LGUI &trans   &kp SPACE  &kp RET   &trans    &kp RALT
      >;
    };
  };
};
